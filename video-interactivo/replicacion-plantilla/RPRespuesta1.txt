¬°Excelente! Vamos a empezar con la estructura base para tu generador de paquetes H5P.
Aqu√≠ tienes el c√≥digo HTML, CSS y JavaScript para la primera fase de tu herramienta:
Generated html
<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generador de Paquetes H5P</title>
  <style>
    /* Reset b√°sico para asegurar consistencia */
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      background-color: #f0f2f5;
      color: #333;
      line-height: 1.6;
    }

    /* Contenedor principal que centra el contenido */
    .main-container {
      max-width: 900px;
      margin: 50px auto;
      padding: 30px;
      background-color: #ffffff;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      gap: 25px;
    }

    h1 {
      font-size: 2em;
      color: #333;
      text-align: center;
      margin-bottom: 30px;
      font-weight: 600;
    }

    /* Estilo para las secciones de input */
    .input-section {
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 20px;
      background-color: #f9f9f9;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .input-section h2 {
      font-size: 1.3em;
      color: #444;
      margin-top: 0;
      margin-bottom: 10px;
      font-weight: 500;
    }

    .file-input-wrapper {
      position: relative;
      overflow: hidden;
      display: inline-block;
      width: 100%;
    }

    .file-input-wrapper input[type="file"] {
      position: absolute;
      left: 0;
      top: 0;
      opacity: 0;
      cursor: pointer;
      width: 100%;
      height: 100%;
      z-index: 10;
    }

    .file-input-display {
      display: flex;
      align-items: center;
      gap: 10px;
      border: 1px solid #dcdcdc;
      border-radius: 6px;
      padding: 10px 15px;
      background-color: #fff;
      cursor: pointer;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .file-input-display:hover {
      border-color: #007bff;
      box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
    }

    .file-input-display .icon {
      font-size: 1.2em;
      color: #666;
    }

    .file-input-display .text {
      flex-grow: 1;
      color: #555;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    /* Bot√≥n general */
    .custom-button {
      border: none;
      border-radius: 5px;
      font-size: 1.1em;
      cursor: pointer;
      transition: background-color 0.2s ease, transform 0.1s ease, opacity 0.2s ease;
      padding: 12px 25px;
      width: 100%;
      box-sizing: border-box;
      font-weight: 500;
    }

    /* Estilo para el bot√≥n principal (Generar) */
    .custom-button.primary-button {
      background-color: #28a745; /* Verde para generar */
      color: white;
    }

    .custom-button.primary-button:hover:not(:disabled) {
      background-color: #218838;
      transform: translateY(-2px);
    }

    .custom-button.primary-button:active:not(:disabled) {
      background-color: #1e7e34;
      transform: translateY(0);
    }

    /* Estilo para los botones deshabilitados */
    .custom-button[disabled] {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
      transform: none;
    }

    /* √Årea de estado/logs */
    .status-area {
      background-color: #e9ecef;
      border: 1px solid #dcdcdc;
      border-radius: 8px;
      padding: 15px;
      min-height: 80px;
      font-size: 0.95em;
      color: #495057;
      overflow-y: auto;
      max-height: 200px;
      white-space: pre-wrap; /* Para mantener saltos de l√≠nea */
    }

    /* Media queries para responsividad */
    @media (max-width: 768px) {
      .main-container {
        margin: 20px auto;
        padding: 20px;
      }

      h1 {
        font-size: 1.7em;
      }

      .input-section {
        padding: 15px;
      }

      .custom-button {
        padding: 10px 20px;
        font-size: 1em;
      }
    }
  </style>
</head>

<body>
  <div class="main-container">
    <h1>Generador de Paquetes H5P de V√≠deos Anotados</h1>

    <div class="input-section">
      <h2>Seleccionar V√≠deo (.mp4)</h2>
      <div class="file-input-wrapper">
        <input type="file" id="videoFileInput" accept="video/mp4">
        <div class="file-input-display">
          <span class="icon">üìÅ</span>
          <span class="text" id="videoFileName">Seleccionar un √∫nico archivo de v√≠deo (.mp4)</span>
        </div>
      </div>
    </div>

    <div class="input-section">
      <h2>Seleccionar Archivos JSON de Anotaciones</h2>
      <div class="file-input-wrapper">
        <input type="file" id="jsonFileInputs" accept="application/json" multiple>
        <div class="file-input-display">
          <span class="icon">üìÅ</span>
          <span class="text" id="jsonFileNames">Seleccionar uno o varios archivos JSON de anotaciones</span>
        </div>
      </div>
    </div>

    <button id="generateH5PButton" class="custom-button primary-button" disabled>
      Generar Paquete H5P
    </button>

    <div class="status-area" id="statusArea">
      Por favor, seleccione un v√≠deo y los archivos JSON de anotaciones.
    </div>
  </div>

  <script>
    const videoFileInput = document.getElementById('videoFileInput');
    const jsonFileInputs = document.getElementById('jsonFileInputs');
    const videoFileNameDisplay = document.getElementById('videoFileName');
    const jsonFileNamesDisplay = document.getElementById('jsonFileNames');
    const generateH5PButton = document.getElementById('generateH5PButton');
    const statusArea = document.getElementById('statusArea');

    let selectedVideoFile = null;
    let selectedJsonFiles = [];

    function updateStatus(message, append = true) {
      if (append) {
        statusArea.textContent += '\n' + message;
      } else {
        statusArea.textContent = message;
      }
      statusArea.scrollTop = statusArea.scrollHeight; // Auto-scroll to bottom
    }

    function checkButtonState() {
      if (selectedVideoFile && selectedJsonFiles.length > 0) {
        generateH5PButton.disabled = false;
      } else {
        generateH5PButton.disabled = true;
      }
    }

    videoFileInput.addEventListener('change', (event) => {
      if (event.target.files.length > 0) {
        selectedVideoFile = event.target.files[0];
        videoFileNameDisplay.textContent = selectedVideoFile.name;
        updateStatus(`V√≠deo seleccionado: ${selectedVideoFile.name}`, false); // No append, replace initial message
      } else {
        selectedVideoFile = null;
        videoFileNameDisplay.textContent = 'Seleccionar un √∫nico archivo de v√≠deo (.mp4)';
        updateStatus('V√≠deo deseleccionado.');
      }
      checkButtonState();
    });

    jsonFileInputs.addEventListener('change', (event) => {
      selectedJsonFiles = Array.from(event.target.files);
      if (selectedJsonFiles.length > 0) {
        const names = selectedJsonFiles.map(file => file.name).join(', ');
        jsonFileNamesDisplay.textContent = names;
        if (selectedVideoFile) { // If video is already selected, append to its status
            updateStatus(`Archivos JSON seleccionados: ${names}`);
        } else { // Otherwise, replace initial message
            updateStatus(`Archivos JSON seleccionados: ${names}`, false);
        }
      } else {
        jsonFileNamesDisplay.textContent = 'Seleccionar uno o varios archivos JSON de anotaciones';
        updateStatus('Archivos JSON deseleccionados.');
      }
      checkButtonState();
    });

    // Initial check for button state on page load
    checkButtonState();

    // Placeholder for future H5P generation logic
    generateH5PButton.addEventListener('click', () => {
      if (generateH5PButton.disabled) return;
      updateStatus('Iniciando la generaci√≥n del paquete H5P...');
      updateStatus(`V√≠deo: ${selectedVideoFile.name}`);
      updateStatus(`JSONs: ${selectedJsonFiles.map(f => f.name).join(', ')}`);
      // Aqu√≠ ir√° la l√≥gica de generaci√≥n del H5P en los pr√≥ximos pasos
    });
  </script>
</body>

</html>
content_copydownload
Use code with caution.Html
Explicaci√≥n de los cambios:
1.	Estructura HTML (index.html):
o	T√≠tulo Principal: <h1>Generador de Paquetes H5P de V√≠deos Anotados</h1>
o	Inputs de Archivo:
ÔÇß	Para el v√≠deo: <input type="file" id="videoFileInput" accept="video/mp4">
ÔÇß	Para los JSON: <input type="file" id="jsonFileInputs" accept="application/json" multiple> (el atributo multiple es clave aqu√≠).
o	Bot√≥n: <button id="generateH5PButton" class="custom-button primary-button" disabled>
o	√Årea de Estado: <div class="status-area" id="statusArea">...</div>
o	file-input-wrapper y file-input-display: Se ha implementado un patr√≥n com√∫n para estilizar los inputs de tipo file, que son dif√≠ciles de estilizar directamente. Se oculta el input real y se simula un clic en un div estilizado.
2.	Estilos CSS (<style> en el head):
o	He reutilizado y adaptado los estilos generales que ya ten√≠as en tu herramienta de anotaci√≥n (custom-button, primary-button, disabled-button, etc.) para mantener una coherencia visual.
o	Se han a√±adido estilos espec√≠ficos para el main-container, input-section, file-input-wrapper, file-input-display y status-area para darles una apariencia clara y ordenada.
o	Se incluye un reset b√°sico y media queries para una respuesta b√°sica.
3.	L√≥gica JavaScript (<script> al final del body):
o	Variables de Estado: selectedVideoFile y selectedJsonFiles se usar√°n para almacenar los archivos seleccionados.
o	updateStatus(message, append): Una funci√≥n auxiliar para escribir mensajes en el statusArea. El par√°metro append permite decidir si se a√±ade el mensaje o se reemplaza el contenido. Tambi√©n incluye un auto-scroll.
o	checkButtonState(): Esta funci√≥n se encarga de habilitar/deshabilitar el bot√≥n "Generar Paquete H5P". Se llama cada vez que cambia la selecci√≥n de archivos. El bot√≥n se habilita solo si selectedVideoFile no es null y selectedJsonFiles tiene al menos un elemento.
o	Event Listeners:
ÔÇß	Para videoFileInput: Actualiza selectedVideoFile y el texto de visualizaci√≥n.
ÔÇß	Para jsonFileInputs: Actualiza selectedJsonFiles y el texto de visualizaci√≥n. Utiliza Array.from(event.target.files) para convertir el FileList en un array y poder usar map y join.
o	Llamada inicial a checkButtonState(): Para que el bot√≥n est√© deshabilitado al cargar la p√°gina.
o	generateH5PButton Event Listener: Contiene un placeholder para la l√≥gica futura.
Ahora tienes una p√°gina HTML con una interfaz funcional que permite la selecci√≥n de archivos y valida las condiciones para habilitar el bot√≥n de generaci√≥n, mostrando el estado en tiempo real.
Estoy listo para tu pr√≥xima instrucci√≥n cuando quieras continuar con el desarrollo del generador H5P.
