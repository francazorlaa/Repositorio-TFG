춰Excelente! Es el momento de la verdad: empaquetar todo el trabajo en un archivo H5P descargable.

He modificado la l칩gica del bot칩n "Generar Paquete H5P" para que, una vez que los datos est치n listos, se cree un archivo ZIP con la estructura H5P correcta, incluyendo el `content.json` modificado, los archivos de la plantilla y el v칤deo subido.

Aqu칤 tienes el c칩digo actualizado:
Generated html      
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generador de Paquetes H5P</title>
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ctext x='50%25' y='50%25' font-size='80' text-anchor='middle' dominant-baseline='central'%3E游닍%3C/text%3E%3C/svg%3E" type="image/svg+xml">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            box-sizing: border-box;
            color: #333;
        }

        .container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            max-width: 700px;
            width: 100%;
            box-sizing: border-box;
            margin-top: 50px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 1.8em;
            font-weight: 600;
        }

        .input-group {
            margin-bottom: 25px;
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .input-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 500;
            color: #444;
            font-size: 1.05em;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input-wrapper input[type="file"] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            cursor: pointer;
            width: 100%;
            height: 100%;
            z-index: 10;
        }

        .file-input-wrapper .custom-file-button {
            display: block;
            width: 100%;
            padding: 12px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-align: center;
            font-size: 1em;
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
            box-sizing: border-box;
        }

        .file-input-wrapper .custom-file-button:hover {
            background-color: #0056b3;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
        }

        .file-names {
            margin-top: 15px;
            font-size: 0.9em;
            color: #666;
            background-color: #f0f0f0;
            border: 1px dashed #ccc;
            padding: 10px;
            border-radius: 5px;
            min-height: 30px; /* Para que siempre tenga un tama침o */
            box-sizing: border-box;
            word-break: break-all; /* Para evitar desbordamientos con nombres largos */
        }

        .file-names p {
            margin: 0 0 5px 0;
            line-height: 1.4;
        }
        .file-names p:last-child {
            margin-bottom: 0;
        }

        .generate-button {
            display: block;
            width: 100%;
            padding: 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 1.1em;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease, opacity 0.2s ease;
        }

        .generate-button:hover:not(:disabled) {
            background-color: #218838;
        }

        .generate-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            opacity: 0.8;
        }

        .log-area {
            margin-top: 30px;
            background-color: #e9ecef;
            border: 1px solid #dcdcdc;
            border-radius: 8px;
            padding: 20px;
            min-height: 100px;
            max-height: 300px;
            overflow-y: auto;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
            font-size: 0.85em;
            color: #495057;
            white-space: pre-wrap; /* Para que los saltos de l칤nea se respeten */
            word-wrap: break-word; /* Para que las palabras largas se rompan */
        }
        .log-area p {
            margin: 0 0 5px 0;
            line-height: 1.4;
        }
        .log-area p:last-child {
            margin-bottom: 0;
        }
        .log-area .info { color: #007bff; }
        .log-area .success { color: #28a745; }
        .log-area .error { color: #dc3545; }
        .log-area .warning { color: #ffc107; }

        @media (max-width: 600px) {
            .container {
                padding: 20px;
                margin-top: 20px;
            }
            h1 {
                font-size: 1.5em;
            }
        }
    </style>
    <!-- Incluye la librer칤a JSZip desde su CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
    <!-- Incluye FileSaver.js para la descarga -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
</head>
<body>
    <div class="container">
        <h1>Generador de Paquetes H5P de V칤deo Interactivo</h1>

        <div class="input-group">
            <label for="videoFileInput">Seleccione un archivo de v칤deo (.mp4):</label>
            <div class="file-input-wrapper">
                <input type="file" id="videoFileInput" accept=".mp4">
                <button class="custom-file-button">Seleccionar V칤deo</button>
            </div>
            <div id="videoFileName" class="file-names">
                <p>Ning칰n v칤deo seleccionado.</p>
            </div>
        </div>

        <div class="input-group">
            <label for="jsonFileInput">Seleccione uno o varios archivos JSON de anotaciones:</label>
            <div class="file-input-wrapper">
                <input type="file" id="jsonFileInput" accept=".json" multiple>
                <button class="custom-file-button">Seleccionar JSON(s)</button>
            </div>
            <div id="jsonFileNames" class="file-names">
                <p>Ning칰n archivo JSON seleccionado.</p>
            </div>
        </div>

        <button id="generateH5PButton" class="generate-button" disabled>Generar Paquete H5P</button>

        <div id="logArea" class="log-area">
            <p class="info">Por favor, seleccione un v칤deo y los archivos JSON de anotaciones.</p>
        </div>
    </div>

    <script>
        // Referencias a elementos del DOM
        const videoFileInput = document.getElementById('videoFileInput');
        const jsonFileInput = document.getElementById('jsonFileInput');
        const generateH5PButton = document.getElementById('generateH5PButton');
        const videoFileNameDiv = document.getElementById('videoFileName');
        const jsonFileNamesDiv = document.getElementById('jsonFileNames');
        const logArea = document.getElementById('logArea');

        // Variables para almacenar los archivos seleccionados
        let selectedVideoFile = null;
        let selectedJsonFiles = [];
        let h5pContentJson = null; // Para almacenar el content.json base cargado
        let videoPathInH5P = ''; // Para almacenar la ruta final del video dentro del H5P

        // --- RUTA BASE DEL REPOSITORIO RAW EN GITHUB ---
        const GITHUB_RAW_BASE_URL = 'https://raw.githubusercontent.com/francazorlaa/Repositorio-TFG/master/estructura-h5p';

        // Lista completa y real de archivos de la plantilla H5P de "V칤deo Interactivo"
        // NOTA IMPORTANTE: Esta lista debe ser la lista COMPLETA de todas las rutas de archivos de tu plantilla H5P.
        // No se ha expandido aqu칤 para mantener el c칩digo conciso, seg칰n tu instrucci칩n.
        const H5P_TEMPLATE_FILES = [
            /* ... Tu lista completa de rutas de archivos de plantilla H5P va aqu칤 ... */
        ];


        // --- Funci칩n para a침adir mensajes al 치rea de log ---
        function appendLog(message, type = 'info') {
            const p = document.createElement('p');
            p.textContent = message;
            p.classList.add(type);
            logArea.appendChild(p);
            logArea.scrollTop = logArea.scrollHeight; // Auto-scroll
        }

        // --- Funci칩n para actualizar el estado del bot칩n "Generar Paquete H5P" ---
        function updateGenerateButtonState() {
            generateH5PButton.disabled = !(selectedVideoFile && selectedJsonFiles.length > 0);
        }

        // --- Event Listener para el input de v칤deo ---
        videoFileInput.addEventListener('change', (event) => {
            selectedVideoFile = event.target.files[0] || null;
            if (selectedVideoFile) {
                videoFileNameDiv.innerHTML = `<p><strong>V칤deo seleccionado:</strong> ${selectedVideoFile.name}</p>`;
                appendLog(`V칤deo seleccionado: "${selectedVideoFile.name}"`, 'info');
            } else {
                videoFileNameDiv.innerHTML = `<p>Ning칰n v칤deo seleccionado.</p>`;
                appendLog('Ning칰n v칤deo seleccionado.', 'warning');
            }
            updateGenerateButtonState();
        });

        // --- Event Listener para el input de JSON ---
        jsonFileInput.addEventListener('change', (event) => {
            selectedJsonFiles = Array.from(event.target.files); // Convertir FileList a Array
            if (selectedJsonFiles.length > 0) {
                jsonFileNamesDiv.innerHTML = '<p><strong>JSON(s) seleccionado(s):</strong></p>';
                selectedJsonFiles.forEach(file => {
                    jsonFileNamesDiv.innerHTML += `<p>- ${file.name}</p>`;
                    appendLog(`JSON seleccionado: "${file.name}"`, 'info');
                });
            } else {
                jsonFileNamesDiv.innerHTML = `<p>Ning칰n archivo JSON seleccionado.</p>`;
                appendLog('Ning칰n archivo JSON seleccionado.', 'warning');
            }
            updateGenerateButtonState();
        });

        // --- Funci칩n auxiliar para introducir un retardo ---
        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        // --- Event Listener para el bot칩n "Generar Paquete H5P" ---
        generateH5PButton.addEventListener('click', async () => {
            if (!generateH5PButton.disabled) {
                logArea.innerHTML = ''; // Limpiar log al iniciar nuevo proceso
                appendLog('Iniciando proceso de generaci칩n de paquete H5P...', 'info');

                let successfulLoads = 0;
                let failedLoads = 0;
                let templateFilesData = {}; // Objeto para almacenar el contenido de los archivos de plantilla

                // --- Paso 1: Cargar todos los archivos de la plantilla H5P con concurrencia ---
                appendLog('Cargando archivos de plantilla H5P desde GitHub (concurrente)...', 'info');

                const CONCURRENCY_LIMIT = 10; // N칰mero de archivos a cargar simult치neamente
                const THROTTLE_DELAY_MS = 50; // Retardo entre bloques de peticiones (ej. 50ms)

                const textExtensions = ['.json', '.js', '.css', '.md', '.html', '.txt', '.xml', '.yml', '.yaml'];

                // Funci칩n para cargar un solo archivo
                const loadFile = async (filePath) => {
                    const fullUrl = GITHUB_RAW_BASE_URL + filePath;
                    const logEntry = document.createElement('p');
                    logEntry.textContent = `Cargando: ${filePath}...`;
                    logEntry.classList.add('info');
                    logArea.appendChild(logEntry);
                    logArea.scrollTop = logArea.scrollHeight;

                    try {
                        const response = await fetch(fullUrl);
                        if (response.ok) { // status 200-299
                            let fileContent;
                            const isTextFile = textExtensions.some(ext => filePath.endsWith(ext));
                            if (isTextFile) {
                                fileContent = await response.text(); // Leer como texto
                            } else {
                                fileContent = await response.blob(); // Leer como Blob para archivos binarios (fuentes, im치genes)
                            }
                            templateFilesData[filePath] = fileContent;
                            logEntry.textContent = `칄XITO: ${filePath} cargado.`;
                            logEntry.classList.remove('info');
                            logEntry.classList.add('success');
                            successfulLoads++;
                        } else {
                            logEntry.textContent = `ERROR: No se pudo cargar ${filePath} (Estado: ${response.status}).`;
                            logEntry.classList.remove('info');
                            logEntry.classList.add('error');
                            failedLoads++;
                        }
                    } catch (error) {
                        logEntry.textContent = `ERROR: No se pudo cargar ${filePath} (Error de red/fetch: ${error.message}).`;
                        logEntry.classList.remove('info');
                        logEntry.classList.add('error');
                        failedLoads++;
                    }
                };

                // Dividir la lista de archivos en lotes y procesarlos con concurrencia
                const filePathsToLoad = [...H5P_TEMPLATE_FILES]; // Copia para no modificar el original
                while (filePathsToLoad.length > 0) {
                    const batch = filePathsToLoad.splice(0, CONCURRENCY_LIMIT);
                    const promises = batch.map(filePath => loadFile(filePath));
                    await Promise.allSettled(promises); // Esperar a que todas las peticiones del lote se resuelvan
                    if (filePathsToLoad.length > 0) {
                        await delay(THROTTLE_DELAY_MS); // Peque침o retardo entre lotes
                    }
                }

                appendLog('--- Resumen de Carga de Plantilla ---', 'info');
                appendLog(`Archivos de plantilla cargados con 칠xito: ${successfulLoads}`, 'success');
                appendLog(`Archivos de plantilla que fallaron: ${failedLoads}`, failedLoads > 0 ? 'error' : 'success');

                if (successfulLoads === 0) {
                    appendLog('No se pudo cargar ning칰n archivo de plantilla. Abortando.', 'error');
                    return; // Abortar si no se carg칩 nada
                }

                // --- Paso 2: Cargar y modificar content.json y procesar anotaciones ---
                appendLog('Cargando y modificando content.json...', 'info');
                const contentJsonPath = '/content/content.json';
                const contentJsonContent = templateFilesData[contentJsonPath];

                if (!contentJsonContent) {
                    appendLog(`ERROR: No se pudo obtener content.json de la plantilla. Abortando.`, 'error');
                    return;
                }

                try {
                    h5pContentJson = JSON.parse(contentJsonContent);

                    // A. Actualizar la ruta del v칤deo en content.json
                    const videoExtension = selectedVideoFile.name.split('.').pop();
                    // *** CORRECCI칍N CR칈TICA AQU칈: Incluir 'content/' en la ruta del v칤deo ***
                    const tempVideoFileName = `file-${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}.${videoExtension}`;
                    videoPathInH5P = `content/videos/${tempVideoFileName}`; // Ruta completa dentro del ZIP

                    if (!h5pContentJson.interactiveVideo || !h5pContentJson.interactiveVideo.video || !h5pContentJson.interactiveVideo.video.files) {
                        appendLog("ADVERTENCIA: La estructura 'interactiveVideo.video.files' no se encontr칩 en content.json. Intentando crearla.", 'warning');
                        h5pContentJson.interactiveVideo = h5pContentJson.interactiveVideo || {};
                        h5pContentJson.interactiveVideo.video = h5pContentJson.interactiveVideo.video || {};
                        h5pContentJson.interactiveVideo.video.files = [];
                    }
                    
                    if (!Array.isArray(h5pContentJson.interactiveVideo.video.files)) {
                        h5pContentJson.interactiveVideo.video.files = [];
                    }

                    h5pContentJson.interactiveVideo.video.files = [{
                        path: videoPathInH5P, // Usar la ruta completa que incluye 'content/'
                        mime: selectedVideoFile.type,
                        copyright: { license: "U" }
                    }];
                    appendLog(`Ruta del v칤deo actualizada a: ${videoPathInH5P}`, 'success');

                    // B. Fusionar anotaciones de los alumnos
                    let allStudentInteractions = [];
                    for (const jsonFile of selectedJsonFiles) {
                        const reader = new FileReader();
                        reader.readAsText(jsonFile);
                        await new Promise((resolve, reject) => {
                            reader.onload = (e) => {
                                try {
                                    const annotations = JSON.parse(e.target.result);
                                    if (Array.isArray(annotations)) {
                                        allStudentInteractions = allStudentInteractions.concat(annotations);
                                        appendLog(`Anotaciones de "${jsonFile.name}" procesadas.`, 'info');
                                    } else {
                                        appendLog(`ADVERTENCIA: El archivo "${jsonFile.name}" no contiene un array de anotaciones v치lido. Saltando.`, 'warning');
                                    }
                                    resolve();
                                } catch (parseError) {
                                    appendLog(`ERROR: No se pudo parsear el JSON de anotaciones de "${jsonFile.name}": ${parseError.message}. Saltando este archivo.`, 'error');
                                    resolve();
                                }
                            };
                            reader.onerror = (error) => {
                                appendLog(`ERROR: Error al leer el archivo local "${jsonFile.name}": ${error.message}`, 'error');
                                resolve();
                            };
                        });
                    }

                    if (!h5pContentJson.interactiveVideo || !h5pContentJson.interactiveVideo.assets) {
                        appendLog("ADVERTENCIA: La estructura 'interactiveVideo.assets' no se encontr칩 en content.json. Intentando crearla.", 'warning');
                        h5pContentJson.interactiveVideo = h5pContentJson.interactiveVideo || {};
                        h5pContentJson.interactiveVideo.assets = h5pContentJson.interactiveVideo.assets || {};
                    }
                    h5pContentJson.interactiveVideo.assets.interactions = allStudentInteractions;

                    appendLog('칄XITO: Las anotaciones de los alumnos se han insertado correctamente en content.json.', 'success');
                    console.log('--- content.json modificado ---');
                    console.log(JSON.stringify(h5pContentJson, null, 2));
                    appendLog('content.json modificado y listo (ver consola para detalles).', 'success');

                } catch (error) {
                    appendLog(`ERROR cr칤tico al procesar content.json o anotaciones: ${error.message}`, 'error');
                    console.error('Error cr칤tico procesando content.json o anotaciones:', error);
                    return;
                }

                // --- Paso 3: Empaquetar todo con JSZip ---
                appendLog('Empaquetando archivos en ZIP...', 'info');
                const zip = new JSZip();

                // 1. A침adir archivos de la plantilla (incluyendo content.json modificado)
                for (const filePath of H5P_TEMPLATE_FILES) {
                    const cleanPath = filePath.startsWith('/') ? filePath.substring(1) : filePath; // Eliminar el '/' inicial

                    if (cleanPath === 'content/content.json') {
                        zip.file(cleanPath, JSON.stringify(h5pContentJson, null, 2)); // A침adir la versi칩n modificada
                        appendLog(`A침adido al ZIP: ${cleanPath} (modificado).`, 'info');
                    } else if (templateFilesData[filePath]) {
                        zip.file(cleanPath, templateFilesData[filePath]); // A침adir el resto de archivos de plantilla cargados
                        appendLog(`A침adido al ZIP: ${cleanPath}.`, 'info');
                    } else {
                        // Esto no deber칤a ocurrir si la fase de carga inicial fue exitosa,
                        // pero es una buena comprobaci칩n.
                        appendLog(`ADVERTENCIA: Archivo de plantilla no encontrado en memoria para ZIP: ${cleanPath}`, 'warning');
                    }
                }

                // 2. A침adir el archivo de v칤deo del profesor
                if (selectedVideoFile && videoPathInH5P) {
                    // videoPathInH5P ya contiene 'content/videos/nombre.mp4', as칤 que solo quitamos el posible '/' inicial
                    const videoFinalPathInZip = videoPathInH5P.startsWith('/') ? videoPathInH5P.substring(1) : videoPathInH5P;
                    zip.file(videoFinalPathInZip, selectedVideoFile); // selectedVideoFile es un File, JSZip lo maneja directamente
                    appendLog(`A침adido al ZIP: ${videoFinalPathInZip} (v칤deo del usuario).`, 'info');
                } else {
                    appendLog('ERROR: No se pudo a침adir el v칤deo del usuario al ZIP.', 'error');
                }

                // Generar y descargar el ZIP
                try {
                    const zipBlob = await zip.generateAsync({ type: "blob" });
                    const downloadFileName = `H5P_InteractiveVideo_Custom_${new Date().toISOString().slice(0, 10)}.h5p`; // Nombre de archivo sugerido
                    saveAs(zipBlob, downloadFileName);
                    appendLog(`칄XITO: Paquete H5P "${downloadFileName}" generado y descargado.`, 'success');
                } catch (error) {
                    appendLog(`ERROR al generar o descargar el ZIP: ${error.message}`, 'error');
                    console.error('Error al generar o descargar el ZIP:', error);
                }

                appendLog('Proceso de generaci칩n de paquete H5P finalizado.', 'info');
            }
        });

        // Inicializar el estado del bot칩n al cargar la p치gina
        updateGenerateButtonState();
    </script>
</body>
</html>
Use code with caution.