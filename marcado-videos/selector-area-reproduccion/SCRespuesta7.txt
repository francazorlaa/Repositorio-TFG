¡Entendido! Tienes razón, en la captura se ve que el reproductor queda dentro del mismo recuadro del selector, y el requisito es que esté en un recuadro separado y más grande. También, el estado inicial sin reproductor visible es crucial.
Vamos a reestructurar ligeramente el HTML y ajustar el CSS y JavaScript para cumplir con estos requisitos.
Resumen de cambios:
•	HTML: Separar el contenedor del selector y el contenedor del reproductor en dos divs hermanos, ambos dentro de un contenedor principal que los centrará.
•	CSS: Ajustar los estilos para que los dos contenedores tengan sus propias dimensiones y estilos, y asegurar el centrado individual.
•	JavaScript: Modificar la lógica para ocultar el reproductor completamente al inicio y mostrarlo solo cuando se selecciona un vídeo válido.
Aquí está el código revisado:
Generated html
<!-- Contenedor principal que centrará tanto el selector como el reproductor -->
<div class="main-centered-container">
    <!-- Contenedor del selector de vídeo -->
    <div class="video-selector-card">
        <h1>Seleccione un vídeo:</h1>
        <div class="select-wrapper">
            <select id="videoSelect">
                <option value="" disabled selected>Cargando vídeos...</option>
            </select>
        </div>
    </div>

    <!-- Contenedor del reproductor de vídeo (inicialmente oculto) -->
    <div id="videoPlayerCard" class="video-player-card" style="display: none;">
        <video id="mainVideoPlayer" controls></video>
        <p id="videoPlaceholder" class="video-placeholder">Seleccione un vídeo para comenzar</p>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    // === CONFIGURACIÓN IMPORTANTE ===
    const MOODLE_CONTEXT_ID = '605943'; // <<-- ¡MODIFICA ESTO CON EL ID CORRECTO DE TU CARPETA!
    const FOLDER_PATH = 'Bloque%201/';
    const MOODLE_BASE_URL = window.location.origin;
    const FILES_BASE_URL = MOODLE_BASE_URL + `/pluginfile.php/${MOODLE_CONTEXT_ID}/mod_folder/content/0/${FOLDER_PATH}`;
    const JSON_FILENAME_TO_LOAD = 'data.json';

    const videoSelect = document.getElementById('videoSelect');
    const videoPlayerCard = document.getElementById('videoPlayerCard');
    const mainVideoPlayer = document.getElementById('mainVideoPlayer');
    const videoPlaceholder = document.getElementById('videoPlaceholder');

    // Función para cargar los vídeos desde un JSON
    async function loadVideos(jsonFilename) {
        videoSelect.innerHTML = '<option value="" disabled selected>Cargando vídeos...</option>';

        try {
            const response = await fetch(FILES_BASE_URL + jsonFilename);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            // Asegurarse de que la primera opción sea siempre la de "Seleccione un vídeo"
            videoSelect.innerHTML = '<option value="" disabled selected>Seleccione un vídeo</option>';

            data.videos.forEach(video => {
                const option = document.createElement('option');
                option.value = FILES_BASE_URL + video.url + '?forcedownload=1';
                option.textContent = video.nombre;
                videoSelect.appendChild(option);
            });

            // No seleccionar ni cargar automáticamente ningún vídeo al inicio
            // El reproductor permanecerá oculto.

        } catch (error) {
            console.error('Error al cargar los vídeos:', error);
            videoSelect.innerHTML = '<option value="" disabled selected>Error al cargar vídeos</option>';
            alert('No se pudieron cargar los vídeos. Por favor, verifique la configuración o la disponibilidad de los archivos.');
        }
    }

    // Función para manejar la selección de un vídeo en el desplegable
    function handleVideoSelection() {
        const selectedVideoUrl = videoSelect.value;
        if (selectedVideoUrl) {
            mainVideoPlayer.src = selectedVideoUrl;
            mainVideoPlayer.load(); // Carga el vídeo
            videoPlayerCard.style.display = 'block'; // Muestra el contenedor del reproductor
            mainVideoPlayer.style.display = 'block'; // Asegura que el elemento <video> esté visible
            videoPlaceholder.style.display = 'none'; // Oculta el mensaje de placeholder
            // mainVideoPlayer.play(); // Opcional: Reproducir automáticamente al seleccionar
        } else {
            // Si se vuelve a seleccionar la opción por defecto (Seleccione un vídeo)
            mainVideoPlayer.pause();
            mainVideoPlayer.src = ""; // Limpiar la fuente
            videoPlayerCard.style.display = 'none'; // Ocultar todo el contenedor del reproductor
        }
    }

    // Event listener para cuando el usuario cambia la selección del vídeo
    videoSelect.addEventListener('change', handleVideoSelection);

    // Cargar los vídeos al inicio
    loadVideos(JSON_FILENAME_TO_LOAD);

    // --- Inyección de estilos CSS ---
    const style = document.createElement('style');
    style.textContent = `
        /* Contenedor principal que centra todo el contenido de la herramienta */
        .main-centered-container {
            display: flex;
            flex-direction: column; /* Apila los elementos verticalmente */
            align-items: center; /* Centra horizontalmente los elementos hijos */
            padding-top: 50px; /* Margen superior para todo el bloque */
            width: 100%; /* Ocupa todo el ancho disponible del contenido de Moodle */
        }

        /* Contenedor del selector de vídeo (primera tarjeta) */
        .video-selector-card {
            text-align: center;
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            max-width: 400px; /* Ancho del selector */
            width: 90%; /* Ancho responsivo */
            margin-bottom: 30px; /* Espacio entre el selector y el reproductor */
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        }

        .video-selector-card h1 {
            font-size: 1.4em;
            color: #333;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .select-wrapper {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        #videoSelect {
            width: 100%;
            padding: 12px 15px;
            font-size: 1em;
            border: 1px solid #dcdcdc;
            border-radius: 6px;
            background-color: #ffffff;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            cursor: pointer;
            outline: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
            color: #555;
        }

        #videoSelect:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
        }

        .select-wrapper::after {
            content: '⌄';
            font-size: 1.2em;
            color: #888;
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }

        /* Estilos para el contenedor del reproductor de vídeo (segunda tarjeta) */
        .video-player-card {
            width: 90%; /* Ancho responsivo */
            max-width: 700px; /* Tamaño visiblemente mayor que el selector (400px) */
            background-color: #000; /* Fondo negro para el vídeo */
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            display: flex; /* Para centrar el placeholder */
            justify-content: center;
            align-items: center;
            min-height: 350px; /* Altura mínima para el contenedor del vídeo cuando no hay vídeo */
            color: #fff;
            padding: 5px; /* Pequeño padding interno para el borde visual */
            border: 1px solid #e0e0e0; /* Borde similar al selector */
        }

        /* Estilos para el elemento <video> */
        #mainVideoPlayer {
            width: 100%;
            height: auto;
            display: block;
            border-radius: 6px; /* Ajuste para que se vea dentro del padding y tenga bordes redondeados */
        }

        /* Estilos para el mensaje de placeholder */
        .video-placeholder {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #ccc;
            font-size: 1.1em;
            text-align: center;
            padding: 15px;
            display: block; /* Inicialmente visible */
        }
    `;
    document.head.appendChild(style);
});
</script>
content_copydownload
Use code with caution.Html
Principales cambios y explicación:
1.	Estructura HTML (main-centered-container):
o	Hemos introducido un nuevo div con la clase main-centered-container que envuelve tanto el .video-selector-card como el .video-player-card.
o	Este contenedor principal utiliza display: flex; flex-direction: column; align-items: center; para centrar horizontalmente sus hijos (el selector y el reproductor) y apilarlos verticalmente.
o	padding-top: 50px; ahora se aplica a este contenedor para el margen superior general.
2.	Contenedores Separados (video-selector-card y video-player-card):
o	El antiguo video-selector-container se ha renombrado a video-selector-card para reflejar su nueva función como una "tarjeta" o bloque independiente.
o	El contenedor del vídeo ahora es un div separado con id="videoPlayerCard" y clase video-player-card.
o	Estado inicial oculto: style="display: none;" se añade directamente al videoPlayerCard en el HTML, asegurando que no se muestre al cargar la página.
o	El videoPlaceholder (Seleccione un vídeo para comenzar) ahora está dentro del videoPlayerCard y se muestra por defecto cuando el videoPlayerCard está visible, pero mainVideoPlayer está oculto.
3.	Ajustes CSS:
o	main-centered-container: Define el patrón de centrado y espaciado para todo el contenido de la herramienta.
o	video-selector-card: Mantiene el ancho max-width: 400px; del selector. Se añade margin-bottom: 30px; para dar espacio entre este y el reproductor.
o	video-player-card:
	max-width: 700px;: Se ha aumentado significativamente para que sea "visiblemente mayor" que el selector (400px), según lo solicitado.
	min-height: 350px;: Una altura mínima más generosa para cuando el reproductor esté vacío o sin vídeo.
	padding: 5px; border: 1px solid #e0e0e0;: Se le da un borde y un pequeño padding para que también parezca una "tarjeta" separada.
o	#mainVideoPlayer: Se eliminó el display: none; inicial, ya que ahora el videoPlayerCard se encarga de ocultar todo el bloque. Cuando el videoPlayerCard se muestra, el videoPlayer ya estará visible por defecto.
4.	Ajustes JavaScript:
o	Estado Inicial: Se eliminó la lógica de selección automática del primer vídeo en loadVideos. Esto asegura que al cargar la página, solo el selector sea visible y el reproductor esté oculto.
o	handleVideoSelection():
	Cuando selectedVideoUrl es válido: videoPlayerCard.style.display = 'block'; ahora muestra el contenedor completo del reproductor.
	Cuando no es válido (se selecciona la opción por defecto): videoPlayerCard.style.display = 'none'; oculta todo el contenedor del reproductor, limpiando la pantalla como se desea.
Con estos cambios, tu herramienta debe comportarse exactamente como lo has descrito, mostrando los dos bloques de forma independiente y con el reproductor oculto al inicio. ¡Pruébalo en Moodle!
