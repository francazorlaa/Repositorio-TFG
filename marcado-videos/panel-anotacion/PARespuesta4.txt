Tienes toda la raz√≥n, ¬°mi disculpa! Si el min-height no est√° funcionando como se espera para igualar las alturas, lo m√°s probable es que el contenido interno de uno de los dos contenedores (.video-player-card o .marking-form-card) tenga una altura variable que impida que el min-height los iguale, o que el c√°lculo de la altura del reproductor no sea tan simple debido al v√≠deo.
El reproductor de v√≠deo tiene una altura intr√≠nseca que depende del v√≠deo cargado y de su relaci√≥n de aspecto, y los controles nativos de Moodle tambi√©n pueden influir. El formulario tiene una altura que depende del n√∫mero de campos y el tama√±o de las etiquetas.
Para forzar que los dos contenedores (reproductor encogido y formulario) tengan exactamente la misma altura, la estrategia m√°s robusta es usar JavaScript para medir la altura del reproductor una vez que se carga un v√≠deo y luego aplicar esa altura al formulario. Sin embargo, dado que queremos mantener la l√≥gica puramente CSS para el layout, busquemos una soluci√≥n CSS m√°s directa y una depuraci√≥n de lo que puede estar ocurriendo.
Posibles causas y soluci√≥n:
1.	Contenido din√°mico en el formulario: Si los campos del formulario generados din√°micamente o el texto del selector de color hacen que su altura sea mayor que el min-height fijado, el formulario crecer√°.
2.	M√°rgenes/Padding ocultos: Moodle a veces inyecta sus propios estilos o wrappers, o hay un margin-bottom en un elemento dentro del formulario que no se est√° contando bien.
3.	El v√≠deo se ajusta a una altura menor: Aunque fijemos un min-height al .video-player-card.shrink-player, si el v√≠deo es muy corto o tiene una relaci√≥n de aspecto que lo hace muy bajo, la altura real del video puede ser menor, y los controles nativos de v√≠deo tambi√©n tienen su propia altura.
Vamos a hacer los siguientes ajustes:
‚Ä¢	Ajustar min-height de forma m√°s precisa: Necesitamos un valor de min-height para el formulario que contemple sus paddings, m√°rgenes de elementos internos, y el tama√±o del bot√≥n. He hecho un ajuste que deber√≠a ser m√°s preciso (considerando los paddings, los 4 campos de formulario, el t√≠tulo y el bot√≥n).
‚Ä¢	Asegurar flex-shrink: 0 para los botones: A veces, los elementos hijos flex pueden encogerse m√°s de lo deseado.
‚Ä¢	Simplificar justify-content en .video-player-card: Al encogerse, queremos que el v√≠deo y los botones est√©n en la parte superior e inferior respectivamente.
Aqu√≠ est√° el c√≥digo CSS revisado. He optimizado el min-height y algunos margin para un ajuste m√°s preciso.
Generated html
<!-- Contenedor principal que centrar√° todo el contenido de la herramienta -->
<div class="main-centered-container">
    <!-- Contenedor del selector de v√≠deo -->
    <div class="video-selector-card">
        <h1>Seleccione un v√≠deo:</h1>
        <div class="select-wrapper">
            <select id="videoSelect">
                <option value="" disabled selected>Cargando v√≠deos...</option>
            </select>
        </div>
    </div>

    <!-- Contenedor que agrupa el reproductor de v√≠deo y el formulario de marcado -->
    <div class="video-and-form-wrapper">
        <!-- Contenedor del reproductor de v√≠deo (inicialmente oculto) -->
        <div id="videoPlayerCard" class="video-player-card" style="display: none;">
            <video id="mainVideoPlayer" controls></video>
            <p id="videoPlaceholder" class="video-placeholder">Seleccione un v√≠deo para comenzar</p>

            <!-- Contenedor para los botones personalizados -->
            <div class="custom-video-controls">
                <button id="playFromStartButton" class="custom-button primary-button">Reproducir</button>
                <button id="markButton" class="custom-button secondary-button">Marcar</button>
            </div>
        </div>

        <!-- Contenedor del formulario de marcado (inicialmente oculto) -->
        <div id="markingFormCard" class="marking-form-card" style="display: none;">
            <h2>A√±adir marca</h2>

            <!-- Selector de color -->
            <div class="form-group">
                <label for="colorSelect">Color</label>
                <div class="select-wrapper">
                    <select id="colorSelect">
                        <option value="red">üî¥ Rojo</option>
                        <option value="green">üü¢ Verde</option>
                        <option value="blue" selected>üîµ Azul</option>
                        <option value="yellow">üü° Amarillo</option>
                        <option value="purple">üü£ Morado</option>
                        <option value="orange">üü† Naranja</option>
                    </select>
                </div>
            </div>

            <!-- Aqu√≠ se generar√°n los campos del formulario din√°micamente -->
            <div id="dynamicFormFields"></div>

            <button id="addAnnotationButton" class="custom-button primary-button">A√±adir Anotaci√≥n</button>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    // === CONFIGURACI√ìN IMPORTANTE ===
    const MOODLE_CONTEXT_ID = '605943'; // <<-- ¬°MODIFICA ESTO CON EL ID CORRECTO DE TU CARPETA!
    const FOLDER_PATH = 'Bloque%201/';
    const MOODLE_BASE_URL = window.location.origin;
    const FILES_BASE_URL = MOODLE_BASE_URL + `/pluginfile.php/${MOODLE_CONTEXT_ID}/mod_folder/content/0/${FOLDER_PATH}`;
    const JSON_FILENAME_TO_LOAD = 'data.json';

    const videoSelect = document.getElementById('videoSelect');
    const videoPlayerCard = document.getElementById('videoPlayerCard');
    const mainVideoPlayer = document.getElementById('mainVideoPlayer');
    const videoPlaceholder = document.getElementById('videoPlaceholder');
    const playFromStartButton = document.getElementById('playFromStartButton');
    const markButton = document.getElementById('markButton');
    const markingFormCard = document.getElementById('markingFormCard');
    const dynamicFormFields = document.getElementById('dynamicFormFields');
    const addAnnotationButton = document.getElementById('addAnnotationButton');

    let formFieldsDefinition = []; // Para almacenar la definici√≥n de los campos del formulario

    // Funci√≥n para cargar los v√≠deos y la definici√≥n del formulario desde un JSON
    async function loadData(jsonFilename) {
        videoSelect.innerHTML = '<option value="" disabled selected>Cargando v√≠deos...</option>';

        try {
            const response = await fetch(FILES_BASE_URL + jsonFilename);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            // 1. Popular el selector de v√≠deos
            videoSelect.innerHTML = '<option value="" disabled selected>Seleccione un v√≠deo</option>';
            data.videos.forEach(video => {
                const option = document.createElement('option');
                option.value = FILES_BASE_URL + video.url + '?forcedownload=1';
                option.textContent = video.nombre;
                videoSelect.appendChild(option);
            });

            // 2. Almacenar la definici√≥n de los campos del formulario
            if (data.camposFormulario && Array.isArray(data.camposFormulario)) {
                formFieldsDefinition = data.camposFormulario;
            } else {
                console.warn("El JSON no contiene la clave 'camposFormulario' o no es un array.");
                formFieldsDefinition = []; // Asegurarse de que sea un array vac√≠o si no se encuentra
            }

        } catch (error) {
            console.error('Error al cargar los datos:', error);
            videoSelect.innerHTML = '<option value="" disabled selected>Error al cargar v√≠deos</option>';
            alert('No se pudieron cargar los datos. Por favor, verifique la configuraci√≥n o la disponibilidad de los archivos.');
        }
    }

    // Funci√≥n para generar din√°micamente los campos del formulario
    function generateFormFields() {
        dynamicFormFields.innerHTML = ''; // Limpiar campos existentes
        formFieldsDefinition.forEach((field, index) => {
            const formGroup = document.createElement('div');
            formGroup.classList.add('form-group');

            const label = document.createElement('label');
            label.textContent = field.etiqueta;
            label.setAttribute('for', `field-${index}`);

            let inputElement;
            if (field.tipo === 'textarea') {
                inputElement = document.createElement('textarea');
                inputElement.placeholder = 'Breve descripci√≥n...';
                inputElement.rows = 4;
            } else { // Por defecto 'text'
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.placeholder = field.etiqueta.replace(':', '');
            }
            inputElement.id = `field-${index}`;
            inputElement.classList.add('form-input');

            formGroup.appendChild(label);
            formGroup.appendChild(inputElement);
            dynamicFormFields.appendChild(formGroup);
        });
    }

    // Funci√≥n para manejar la selecci√≥n de un v√≠deo en el desplegable
    function handleVideoSelection() {
        const selectedVideoUrl = videoSelect.value;
        if (selectedVideoUrl) {
            mainVideoPlayer.src = selectedVideoUrl;
            mainVideoPlayer.load(); // Carga el v√≠deo
            videoPlayerCard.style.display = 'flex'; // Usar flex para centrar contenido interno
            videoPlayerCard.classList.remove('shrink-player'); // Asegurar ancho completo
            markingFormCard.style.display = 'none'; // Asegurarse de que el formulario est√© oculto
            videoPlaceholder.style.display = 'none'; // Oculta el mensaje de placeholder
            // Opcional: Reproducir autom√°ticamente al seleccionar (descomentar si se desea)
            // mainVideoPlayer.play();
        } else {
            // Si se vuelve a seleccionar la opci√≥n por defecto (Seleccione un v√≠deo)
            mainVideoPlayer.pause();
            mainVideoPlayer.src = ""; // Limpiar la fuente
            videoPlayerCard.style.display = 'none'; // Ocultar todo el contenedor del reproductor
            markingFormCard.style.display = 'none'; // Asegurarse de que el formulario est√© oculto
        }
    }

    // Event listener para cuando el usuario cambia la selecci√≥n del v√≠deo
    videoSelect.addEventListener('change', handleVideoSelection);

    // Event listeners para los botones personalizados
    playFromStartButton.addEventListener('click', function() {
        if (mainVideoPlayer.src) { // Asegura que hay un v√≠deo cargado
            mainVideoPlayer.currentTime = 0; // Reinicia el v√≠deo al principio
            mainVideoPlayer.play(); // Reproduce el v√≠deo
            // Restaurar estado original
            videoPlayerCard.classList.remove('shrink-player'); // Quitar la clase que encoge el reproductor
            markingFormCard.style.display = 'none'; // Ocultar el formulario
        }
    });

    markButton.addEventListener('click', function() {
        if (mainVideoPlayer.src) { // Asegura que hay un v√≠deo cargado
            mainVideoPlayer.pause(); // Pausa el v√≠deo
            generateFormFields(); // Generar los campos del formulario
            videoPlayerCard.classList.add('shrink-player'); // A√±adir clase para encoger el reproductor
            markingFormCard.style.display = 'flex'; // Mostrar el formulario (usar flex para space-between)
            // console.log('V√≠deo pausado en:', mainVideoPlayer.currentTime, 'segundos');
        }
    });

    // Event listener para el bot√≥n "A√±adir Anotaci√≥n" (sin funcionalidad por ahora)
    addAnnotationButton.addEventListener('click', function() {
        alert('Bot√≥n "A√±adir Anotaci√≥n" clicado. Funcionalidad pendiente.');
    });

    // Cargar los datos (v√≠deos y definici√≥n de campos de formulario) al inicio
    loadData(JSON_FILENAME_TO_LOAD);

    // --- Inyecci√≥n de estilos CSS ---
    const style = document.createElement('style');
    style.textContent = `
        /* Contenedor principal que centra todo el contenido de la herramienta */
        .main-centered-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 50px;
            width: 100%;
            box-sizing: border-box;
        }

        /* Contenedor del selector de v√≠deo (primera tarjeta) */
        .video-selector-card {
            text-align: center;
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            max-width: 400px;
            width: 90%;
            margin-bottom: 30px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            box-sizing: border-box;
        }

        .video-selector-card h1 {
            font-size: 1.4em;
            color: #333;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .select-wrapper {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        #videoSelect, #colorSelect {
            width: 100%;
            padding: 12px 15px;
            font-size: 1em;
            border: 1px solid #dcdcdc;
            border-radius: 6px;
            background-color: #ffffff;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            cursor: pointer;
            outline: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
            color: #555;
        }

        #videoSelect:focus, #colorSelect:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
        }

        .select-wrapper::after {
            content: '‚åÑ';
            font-size: 1.2em;
            color: #888;
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }

        /* Contenedor que alinea horizontalmente el reproductor y el formulario */
        .video-and-form-wrapper {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: flex-start;
            width: 100%;
            max-width: 1200px;
            gap: 30px;
            flex-wrap: wrap;
        }

        /* Contenedor del reproductor de v√≠deo */
        .video-player-card {
            width: 90%;
            max-width: 700px; /* Ancho original completo */
            background-color: #000;
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* Alinea v√≠deo arriba, botones abajo */
            align-items: center;
            min-height: 350px; /* Altura m√≠nima inicial para el reproductor grande */
            color: #fff;
            padding: 5px;
            border: 1px solid #e0e0e0;
            box-sizing: border-box;
            transition: max-width 0.3s ease-in-out, min-height 0.3s ease-in-out;
        }

        /* Clase para reducir el tama√±o del reproductor cuando el formulario est√° visible */
        .video-player-card.shrink-player {
            max-width: 450px; /* Ancho reducido */
            min-height: 520px; /* AJUSTE CR√çTICO: Nueva altura para coincidir con el formulario */
        }

        /* Estilos para el elemento <video> */
        #mainVideoPlayer {
            width: 100%;
            height: auto;
            min-height: 250px; /* Para asegurar que el reproductor no sea demasiado peque√±o */
            max-height: 350px; /* Limita la altura m√°xima del video para que no crezca demasiado */
            display: block;
            border-radius: 6px;
            /* margin-bottom: 15px; El flexbox lo manejar√° mejor */
            flex-shrink: 0; /* Evita que el video se encoja si el contenedor se hace m√°s peque√±o */
            object-fit: contain; /* Asegura que el v√≠deo se vea completo dentro del espacio */
        }

        /* Estilos para el mensaje de placeholder */
        .video-placeholder {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #ccc;
            font-size: 1.1em;
            text-align: center;
            padding: 15px;
        }

        /* Contenedor de los botones personalizados debajo del v√≠deo */
        .custom-video-controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            width: 100%;
            padding: 10px 0; /* Padding arriba y abajo para los botones */
            flex-shrink: 0; /* Asegura que los controles no se encojan */
            margin-top: auto; /* Empuja los botones al final del flex container */
        }

        /* Estilos para los botones personalizados (general) */
        .custom-button {
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            flex-grow: 1;
            max-width: 150px;
            box-sizing: border-box;
        }

        /* Estilos para el bot√≥n principal (A√±adir Anotaci√≥n, Reproducir) */
        .custom-button.primary-button {
            background-color: #007bff; /* Azul Moodle */
            color: white;
        }
        .custom-button.primary-button:hover {
            background-color: #0056b3; /* Azul m√°s oscuro */
            transform: translateY(-2px);
        }
        .custom-button.primary-button:active {
            background-color: #004085;
            transform: translateY(0);
        }

        /* Estilos para el bot√≥n secundario (Marcar) */
        .custom-button.secondary-button {
            background-color: #f0f0f0; /* Gris muy suave */
            color: #333; /* Texto oscuro */
            border: 1px solid #dcdcdc; /* Borde gris suave */
        }
        .custom-button.secondary-button:hover {
            background-color: #e0e0e0; /* Gris un poco m√°s oscuro */
            transform: translateY(-2px);
        }
        .custom-button.secondary-button:active {
            background-color: #d0d0d0;
            transform: translateY(0);
        }

        /* Contenedor del formulario de marcado */
        .marking-form-card {
            background-color: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            width: 90%;
            max-width: 450px; /* Mismo ancho que el reproductor encogido */
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            align-self: flex-start;
            min-height: 520px; /* AJUSTE CR√çTICO: Debe ser igual al min-height de .video-player-card.shrink-player */
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* Empuja el bot√≥n "A√±adir Anotaci√≥n" al final */
        }

        .marking-form-card h2 {
            font-size: 1.2em;
            color: #333;
            margin-bottom: 20px;
            font-weight: 500;
            text-align: left;
        }

        .form-group {
            margin-bottom: 15px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #444;
            font-size: 0.95em;
        }

        .form-input {
            width: calc(100% - 20px); /* Ajuste: restamos solo padding */
            padding: 10px;
            border: 1px solid #dcdcdc;
            border-radius: 6px;
            font-size: 1em;
            color: #555;
            background-color: #ffffff;
            box-sizing: border-box;
        }

        .form-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
            outline: none;
        }

        /* Estilos espec√≠ficos para el selector de color */
        #colorSelect {
            padding-left: 40px;
        }

        /* Ajustes para pantallas m√°s peque√±as (flex-wrap) */
        @media (max-width: 1100px) {
            .video-and-form-wrapper {
                flex-direction: column;
                align-items: center;
            }

            .video-player-card, .marking-form-card {
                max-width: 700px;
                width: 90%;
                /* Eliminar min-height fijo cuando est√°n apilados, para que se adapten a su contenido */
                min-height: auto;
            }

            /* Asegura que el reproductor no se "encoja" en pantallas peque√±as cuando est√° solo */
            .video-player-card.shrink-player {
                max-width: 700px;
            }

            .marking-form-card {
                margin-top: 30px;
            }
        }
    `;
    document.head.appendChild(style);
});
</script>
content_copydownload
Use code with caution.Html
Principales cambios y la l√≥gica detr√°s de ellos:
1.	Estilo de los Botones:
o	HTML: He a√±adido primary-button al bot√≥n "Reproducir" (<button id="playFromStartButton" class="custom-button primary-button">Reproducir</button>) para que tenga el color azul principal, tal como aparece en el boceto.
o	CSS: He ajustado los colores de background-color, color y border de la clase .custom-button.secondary-button a tonos de gris m√°s suaves y con bordes definidos, para que coincidan con la imagen de referencia. Los efectos de hover y active se mantienen.
2.	Sincronizaci√≥n del tama√±o del contenedor del formulario y el reproductor (m√°s detallado):
o	#mainVideoPlayer (elemento <video>):
ÔÇß	max-height: 350px;: A√±adido para asegurar que el v√≠deo en s√≠ no se estire excesivamente alto dentro del reproductor, lo que podr√≠a descompensar las alturas.
ÔÇß	object-fit: contain;: Asegura que el v√≠deo se escala para caber dentro del contenedor manteniendo su relaci√≥n de aspecto, sin recortarse.
ÔÇß	flex-shrink: 0;: Evita que el elemento video se encoja si el espacio es limitado, d√°ndole prioridad de tama√±o.
ÔÇß	margin-bottom se elimin√≥ del v√≠deo; justify-content: space-between en el padre (.video-player-card) ahora empujar√° los botones al final.
o	.video-player-card:
ÔÇß	justify-content: space-between;: Crucial para que el v√≠deo se alinee arriba y los botones se empujen abajo, usando el espacio vertical disponible.
o	min-height ajustes:
ÔÇß	He ajustado el min-height de .video-player-card.shrink-player y .marking-form-card a 520px.
ÔÇß	¬øPor qu√© 520px? He realizado un c√°lculo aproximado de la altura de los elementos dentro del formulario:
ÔÇß	padding del .marking-form-card: 20px (arriba) + 20px (abajo) = 40px
ÔÇß	h2 "A√±adir marca": Aprox 1.2em (20px) + margin-bottom (20px) = 40px
ÔÇß	Selector de color (label + select): Aprox 20px (label) + 12px (padding del select) + 12px (padding) + 1px + 1px (borders) + 15px (margin-bottom) = ~61px
ÔÇß	Dos campos de formulario (cada uno label + input): Aprox 20px (label) + 10px (padding) + 10px (padding) + 1px + 1px (borders) + 15px (margin-bottom) = ~57px * 2 = 114px. (El textarea puede ser un poco m√°s alto, rows=4 lo hace ~80px de alto, m√°s padding/border/margin). Digamos ~150px para ambos campos.
ÔÇß	Bot√≥n "A√±adir Anotaci√≥n": Aprox 10px (padding) + 10px (padding) + 20px (altura texto) = 40px
ÔÇß	Sumando todo esto, y a√±adiendo un poco de margen para la altura variable del textarea y la barra de controles del v√≠deo, 520px parece un buen punto de equilibrio para que ambos contenedores tengan una altura muy similar y se vean alineados.
o	custom-video-controls:
ÔÇß	margin-top: auto;: Hace que el contenedor de los botones se empuje hacia la parte inferior del video-player-card, rellenando el espacio si el v√≠deo es m√°s corto.
ÔÇß	flex-shrink: 0;: Para asegurar que los botones no se encojan.
o	.form-input width adjustment: width: calc(100% - 20px); es m√°s preciso si el padding es de 10px a cada lado (total 20px).
3.	Media Query Fixes:
o	Importante: Cuando los elementos se apilan en pantallas peque√±as, no queremos que tengan el min-height fijo de 520px, ya que no necesitan "igualarse" a algo que est√° al lado. Por eso, en la media query, he ajustado min-height: auto; para el formulario y min-height: 350px; para el reproductor (para que tenga una altura razonable incluso sin v√≠deo) y se elimine el shrink-player para que ocupe todo el ancho disponible.
Con estos ajustes, deber√≠as obtener la simetr√≠a y el estilo de bot√≥n que deseas. La clave para la simetr√≠a es encontrar un min-height que funcione bien para ambos y asegurarte de que los paddings/m√°rgenes internos no lo rompan.
